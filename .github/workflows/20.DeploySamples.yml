name: Deploy Samples

env:
  AZURE_WEBAPP_NAME: authsample-api-testms-01   # Name of your Azure Web App
  AZURE_WEBAPP_PACKAGE_PATH: './publish'       # Path to the published output
  DOTNET_VERSION: '8.0.x'                      # .NET version to use

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: self-hosted
    steps:
      # Step 1: Checkout the code
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Display dotnet version
        run: dotnet --version

      - name: Set up dependency caching for faster builds
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # Step 3: Restore dependencies and build the Samples solution/project
      # If you have a solution file for Samples, reference it; otherwise, iterate over sample projects
      - name: Restore Samples
        run: dotnet restore src/Diginsight.Components.sln

      - name: Build Samples
        run: dotnet build src/Diginsight.Components.sln --configuration Release

      # Step 4: Publish Samples (producing a deployable artifact) 
      # - name: Publish Samples
      #   run: dotnet publish src/Diginsight.Components.sln --configuration Release --framework net8.0-windows --output publish
      - name: Publish AuthenticationSampleApi
        run:  dotnet publish src/Samples/AuthenticationSampleApi/AuthenticationSampleApi.csproj --configuration Release --framework net8.0 --output ./publish
      - name: Publish AuthenticationSampleServerApi
        run:  dotnet publish src/Samples/AuthenticationSampleServerApi/AuthenticationSampleServerApi.csproj --configuration Release --framework net8.0 --output ./publish
      - name: Publish AuthenticationSampleClient
        run:  dotnet publish src/Samples/AuthenticationSampleClient/AuthenticationSampleClient.csproj --configuration Release --framework net8.0-windows --output ./publish

      # Step 5: Upload the published output as an artifact (if you want to persist the build)
      - name: Upload Published Samples
        uses: actions/upload-artifact@v4
        with:
          name: published-samples
          path: publish

  deploy:
    runs-on: self-hosted
    needs: build
    environment:
      name: 'Testms'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: published-samples
          path: ./publish

      - name: Dump ENV_CONTEXT
        env:
          ENV_CONTEXT: ${{ toJson(env) }}
        run: |
          echo "$ENV_CONTEXT"
          echo "$env:ENV_CONTEXT" >> 07.ENV_CONTEXT.log

      - name: Dump VARS_CONTEXT
        env:
          VARS_CONTEXT: ${{ toJson(vars) }}
        run: |
          echo "$VARS_CONTEXT"
          echo "$env:VARS_CONTEXT" >> 08.VARS_CONTEXT.log

      - name: Dump SECRETS_CONTEXT
        env:
          SECRETS_CONTEXT: ${{ toJson(secrets) }}
        run: |
          echo "$SECRETS_CONTEXT"
          echo "$env:SECRETS_CONTEXT" >> 10.SECRETS_CONTEXT.log

      - name: Zip publish folder
        run: |
          cd publish
          zip -r ../publish.zip .
          cd ..

      - name: Check publish.zip exists
        run: ls -lh publish.zip

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: publish.zip